		(* 3.2.1 *)type plate =  (int * int * int) ;;type game_status = Non_termine | Joueur1_vainqueur | Joueur2_vainqueur | Match_nul;;		(* 3.2.2 *)let init n = (( 0, n, n):plate);;	      		(* 3.2.3 *)				let display (( pos, j1_or, j2_or):plate) = print_newline();					print_string "Pl. 1 : "; 					print_int j1_or;					print_newline();					for x = -2 to 2 do						print_string ("  |  " ^ (if pos = x then "X" else " ") ^ "  |");						print_newline();					done;					print_string "Pl. 2 : "; 					print_int j2_or;					print_newline();;							(* 3.2.4 *)										let update ((pos, j1_or, j2_or):plate) (mise1, mise2)= 					(((if mise1 < mise2 then 1 + pos						else if mise1 > mise2 then -1 + pos					else pos),					j1_or - mise1,					j2_or - mise2):plate);;												(* 3.2.5 *)					let get_status ((pos, j1_or, j2_or):plate)= 					match ((pos, j1_or, j2_or):plate) with					| ((pos, j1_or, j2_or):plate) when pos = -2 -> Joueur1_vainqueur					| ((pos, j1_or, j2_or):plate) when pos = 2 -> Joueur2_vainqueur					| ((pos, j1_or, j2_or):plate) when j1_or = 0 && j2_or = 0 -> Match_nul					| ((pos, j1_or, j2_or):plate) -> Non_termine;;